@{
  ViewData["Title"] = "Partida";
}

<!doctype html>
<html lang="es">

<head>
  <meta charset="utf-8">
  <title>Coop Resources ‚Äî V1 (n√∫meros + botones)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap 5 CSS (CDN) -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

  <style>
    body {
      background: #0b1220;
      color: #e6e8ef;
    }

    .card {
      background: #121a2b;
      border: 1px solid #223150;
    }

    .brand {
      letter-spacing: .5px;
    }

    .resource-value {
      font-variant-numeric: tabular-nums;
    }

    .finished {
      background: linear-gradient(135deg, #0a7d40, #0f5132);
      color: #d1f5e1;
      border: 1px solid #198754;
    }

    .muted {
      color: #b8bfd3;
    }

    .badge-soft {
      background: #1b2742;
      color: #9fb4ff;
    }

    .btn-resource {
      min-width: 140px;
    }

    .small-note {
      font-size: .9rem;
    }

    .resource-counter {
      background: #1b2742;
      border: 1px solid #3d4956;
      border-radius: 0.5rem;
      padding: 1rem;
      text-align: center;
    }

    .resource-current {
      font-size: 2.5rem;
      font-weight: 700;
      color: #ffffff;
      line-height: 1;
      margin-bottom: 0.25rem;
    }

    .resource-total {
      font-size: 1rem;
      color: #9fb4ff;
      font-weight: 500;
    }

    .form-control:focus {
      background: #1b2742 !important;
      border-color: #4dabf7 !important;
      box-shadow: 0 0 0 0.25rem rgba(77, 171, 247, 0.25) !important;
      color: #ffffff !important;
    }

    .is-invalid {
      border-color: #dc3545 !important;
      box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
    }
  </style>
</head>

<body>

  <!-- Navbar -->
  <nav class="navbar navbar-dark border-bottom border-secondary-subtle" style="background:#0b1220;">
    <div class="container">
      <a class="navbar-brand brand d-flex align-items-center gap-2" href="#">
        <span class="fw-bold">Coopera</span>
        <span class="badge rounded-pill text-bg-secondary">V1 (n√∫meros)</span>
      </a>
      <div class="d-flex align-items-center gap-3">
        <span id="playerNameDisplay" class="muted">Jugador: <em>@Model.Jugador.Nombre</em></span>
      </div>
    </div>
  </nav>

  <!-- Main -->
  <main class="container py-4">

    <!-- Estado de la partida -->
    <!-- <div id="stateBanner" class="alert alert-info border-0 visually-hidden" role="alert">
      mensaje de <strong>EXITO</strong>
    </div> -->

    <!-- <div id="stateBanner" class="alert alert-danger border-0" role="alert"> -->
    <!--   mensaje de <strong>ERROR</strong> -->
    <!-- </div> -->

    <div id="stateBanner" class="alert alert-info border-0" style="display:none;" role="alert">
      <strong>¬°√âxito!</strong> Has recolectado un recurso.
    </div>

    <!-- Metas -->
    <div class="row g-3 mb-3" id="targetsRow">
      <div class="col-12 col-lg-4">
        <div class="card h-100">
          <div class="card-body d-flex flex-column text-center">
            <h5 class="card-title mb-3 text-white">Madera</h5>

            <div class="resource-counter mb-3">
              <div class="resource-current" id="woodCurrent">@Model.Partida.Madera</div>
              <div class="resource-total">de <span id="woodTotal">@Model.Partida.Meta</span></div>
            </div>

            <p class="card-text muted small-note mb-4">Suma 1 por click.</p>
            <div class="mt-auto d-grid">
              <button id="btnWood" class="btn btn-primary btn-resource" value="Madera">
                +1 Madera
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="col-12 col-lg-4">
        <div class="card h-100">
          <div class="card-body d-flex flex-column text-center">
            <h5 class="card-title mb-3 text-white">Piedra</h5>

            <div class="resource-counter mb-3">
              <div class="resource-current" id="stoneCurrent">@Model.Partida.Piedra</div>
              <div class="resource-total">de <span id="stoneTotal">@Model.Partida.Meta</span></div>
            </div>

            <p class="card-text muted small-note mb-4">Suma 1 por click.</p>
            <div class="mt-auto d-grid">
              <button id="btnStone" class="btn btn-warning btn-resource" value="Piedra">
                +1 Piedra
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="col-12 col-lg-4">
        <div class="card h-100">
          <div class="card-body d-flex flex-column text-center">
            <h5 class="card-title mb-3 text-white">Comida</h5>

            <div class="resource-counter mb-3">
              <div class="resource-current" id="foodCurrent">@Model.Partida.Comida</div>
              <div class="resource-total">de <span id="foodTotal">@Model.Partida.Meta</span></div>
            </div>

            <p class="card-text muted small-note mb-4">Suma 1 por click.</p>
            <div class="mt-auto d-grid">
              <button id="btnFood" class="btn btn-success btn-resource" value="Comida">
                +1 Comida
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

    <!-- Modal Minijuego de Matem√°ticas -->
    <div class="modal fade" id="mathGameModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="background: #121a2b; border: 1px solid #223150; position: relative;">
                <div class="countdown" id="mathCountdown">60s</div>
                <div class="modal-header border-bottom border-secondary-subtle">
                    <h5 class="modal-title text-white">üßÆ Minijuego: Matem√°ticas</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="math-problem" id="mathProblem">
                        23 + 45 + 67 = ?
                    </div>
                    <div class="mb-3">
                        <label for="mathAnswer" class="form-label text-white">Tu respuesta:</label>
                        <input type="number"
                               class="form-control form-control-lg text-center"
                               id="mathAnswer"
                               placeholder="Ingresa el resultado"
                               style="background: #1b2742; border: 1px solid #3d4956; color: #ffffff; font-size: 1.5rem;">
                    </div>
                </div>
                <div class="modal-footer border-top border-secondary-subtle">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="submitMathAnswer">Enviar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Minijuego de Memoria -->
    <div class="modal fade" id="memoryGameModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content" style="background: #121a2b; border: 1px solid #223150; position: relative;">
                <div class="countdown" id="memoryCountdown">60s</div>
                <div class="modal-header border-bottom border-secondary-subtle">
                    <h5 class="modal-title text-white">üß† Minijuego: Memoria</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- Fase 1: Mostrar secuencia -->
                    <div id="memorySequencePhase">
                        <p class="text-center text-white mb-3">Memoriza la siguiente secuencia:</p>
                        <div class="sequence-number" id="sequenceDisplay">5</div>
                        <div class="text-center">
                            <small class="text-muted">N√∫mero <span id="sequencePosition">1</span> de 5</small>
                        </div>
                    </div>

                    <!-- Fase 2: Pregunta -->
                    <div id="memoryQuestionPhase" style="display:none;">
                        <h6 class="text-white mb-3" id="questionMemory">¬øHab√≠a exactamente 2 n√∫meros pares?</h6>
                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-success btn-lg" id="memoryYes">‚úÖ S√≠</button>
                            <button type="button" class="btn btn-danger btn-lg" id="memoryNo">‚ùå No</button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-top border-secondary-subtle">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Minijuego de L√≥gica -->
    <div class="modal fade" id="logicGameModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="background: #121a2b; border: 1px solid #223150; position: relative;">
                <div class="countdown" id="logicCountdown">60s</div>
                <div class="modal-header border-bottom border-secondary-subtle">
                    <h5 class="modal-title text-white">üß© Minijuego: L√≥gica</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="logic-statement">
                        <h6 class="text-white mb-3">N√∫meros: <span id="numberArrayLogic">24, 47, 68</span></h6>
                        <p class="text-white mb-0">Proposici√≥n: <span id="propositionLogic">"Exactamente 2 n√∫meros son pares"</span></p>
                    </div>
                    <h6 class="text-white mt-4 mb-3">¬øEsta proposici√≥n es verdadera o falsa?</h6>
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-success btn-lg" id="logicTrue">‚úÖ Verdadero</button>
                        <button type="button" class="btn btn-danger btn-lg" id="logicFalse">‚ùå Falso</button>
                    </div>
                </div>
                <div class="modal-footer border-top border-secondary-subtle">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>


  <!-- Bootstrap 5 JS Bundle (CDN) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>

  <script>
      document.addEventListener('DOMContentLoaded', () => {
          //Inicializar variables
          let countdownTimers = {};
          let currentNumberArray = [];
          let currentQuestion = '';
          let rightAnswer = -1;

          const recursoMap = {
              "Madera": 0,
              "Piedra": 1,
              "Comida": 2
          };

          // Inicializar modales
          const mathGameModal = new bootstrap.Modal(document.getElementById('mathGameModal'));
          const memoryGameModal = new bootstrap.Modal(document.getElementById('memoryGameModal'));
          const logicGameModal = new bootstrap.Modal(document.getElementById('logicGameModal'));

          document.querySelectorAll(".btn-resource").forEach(button => {

          button.addEventListener("click", () => {
                const recursoStr = button.value; // "Madera"
                const recursoInt = recursoMap[recursoStr]; // 0

                    if (recursoInt == 0) {
                      fetch('@Url.Action("CrearMinijuego", "Partida")', {
                            method: 'POST',
                            headers: {
                              'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ recurso: recursoInt })
                          })
                          .then(response => response.json())
                          .then(data => {
                              //guardar valores
                                currentQuestion = data.pregunta;
                                rightAnswer = data.respuestaCorrecta;
                              //Asignar valores del array
                                document.getElementById('mathProblem').innerText = currentQuestion;
                                document.getElementById('mathAnswer').value = '';

                                mathGameModal.show();
                                startCountdown('mathCountdown');
                          })
                          .catch(err => console.error("Error:", err));
                    } else if (recursoInt == 1) {
                      fetch('@Url.Action("CrearMinijuego", "Partida")', {
                           method: 'POST',
                           headers: {
                             'Content-Type': 'application/json',
                           },
                             body: JSON.stringify({ recurso: recursoInt })
                           })
                           .then(response => response.json())
                           .then(data => {
                                //guardar valores
                                  currentNumberArray = data.secuencia;
                                  currentQuestion = data.pregunta;
                                  rightAnswer = data.respuestaCorrecta;
                                //asignar la pregunta
                                  document.getElementById('questionMemory').innerText = currentQuestion;

                                  memoryGameModal.show();
                                  startCountdown('memoryCountdown');
                                  startMemorySequence(currentNumberArray);
                           })
                           .catch(err => console.error("Error:", err));
                    } else if (recursoInt == 2) {
                      fetch('@Url.Action("CrearMinijuego", "Partida")', {
                              method: 'POST',
                              headers: {
                                'Content-Type': 'application/json',
                              },
                              body: JSON.stringify({ recurso: recursoInt })
                              })
                              .then(response => response.json())
                              .then(data => {
                                  //guardar valores
                                    currentNumberArray = data.secuencia;
                                    currentQuestion = data.pregunta;
                                    rightAnswer = data.respuestaCorrecta;
                                  //Asignar valores del array
                                    document.getElementById('numberArrayLogic').innerText = `${currentNumberArray[0]}, ${currentNumberArray[1]}, ${currentNumberArray[2]}`;
                                    document.getElementById('propositionLogic').innerText = currentQuestion;

                                    logicGameModal.show();
                                    startCountdown('logicCountdown');
                              })
                              .catch(err => console.error("Error:", err));
                }
            });
          });

           // Countdown timer
          function startCountdown(elementId, duration = 60) {
            let timeLeft = duration;
            const element = document.getElementById(elementId);

            countdownTimers[elementId] = setInterval(() => {
              timeLeft--;
              element.textContent = timeLeft + 's';

              if (timeLeft <= 0) {
                clearInterval(countdownTimers[elementId]);
                element.textContent = 'Tiempo agotado';
              }
            }, 1000);
          }

          // Limpiar countdown
          function clearCountdown(elementId) {
            if (countdownTimers[elementId]) {
              clearInterval(countdownTimers[elementId]);
              delete countdownTimers[elementId];
            }
          }

          function esperar(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }

          //Funci√≥n para a√±adir recurso en las respuestas correctas
          function addResource(recurso) {
              fetch('@Url.Action("EnviarRecursos", "Partida")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ recurso: recursoMap[recurso] })
              })
              .then(response => response.json())
              .then(data => {

                  document.getElementById("woodCurrent").textContent = data.totalMadera;
                  document.getElementById("stoneCurrent").textContent = data.totalPiedra;
                  document.getElementById("foodCurrent").textContent = data.totalComida;

                  if (recurso == "Madera"){
                        mathGameModal.hide();
                  } else if (recurso == "Piedra"){
                        memoryGameModal.hide();
                  } else if (recurso == "Comida"){
                        logicGameModal.hide();
                  }

                  if (data.partidaFinalizada) {
                        const alertDiv = document.createElement("div");
                        alertDiv.className = "alert alert-success alert-dismissible fade show mt-4";
                        alertDiv.role = "alert";
                        alertDiv.innerHTML = `
                          :tada: <strong>¬°La partida ha finalizado!</strong> Has alcanzado la meta en todos los recursos.
                          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>`;

                        document.querySelector("main").prepend(alertDiv);
                        document.querySelectorAll(".btn-resource").forEach(b => b.disabled = true);
                  } else {
                        showSuccessMessage(`¬°Correcto! Has recolectado ${recurso}.`);
                  }
              })
              .catch(err => console.error("Error:", err));
            }

            // Minijuego de Matem√°ticas Submit
          document.getElementById('submitMathAnswer').addEventListener('click', async function() {
              const answer = document.getElementById('mathAnswer').value;

              clearCountdown('mathCountdown');

              if (parseInt(answer) === rightAnswer) {

                  addResource("Madera");
              } else {
                  mathGameModal.hide();
                  showErrorMessage(`Respuesta incorrecta. La suma correcta era ${rightAnswer}.`);
              }
            });

            //Secuencia para el minijuego de memoria
            async function startMemorySequence(numeros){
                const display = document.getElementById('sequenceDisplay');
                const position = document.getElementById('sequencePosition');
                let counter = 0;

                  for (let numero in numeros) {
                      counter++;
                      display.textContent = numeros[numero];
                      position.textContent = counter;
                      await esperar(1000);
                      display.textContent = '';
                      await esperar(500);
                  }

                setTimeout(() => {
                  document.getElementById('memorySequencePhase').style.display = 'none';
                  document.getElementById('memoryQuestionPhase').style.display = 'block';
                }, 1000);
            }

            //Bot√≥n "s√≠" de Memoria
            document.getElementById('memoryYes').addEventListener('click', function() {
              clearCountdown('memoryCountdown');

              if (rightAnswer === 1) {
                  addResource("Piedra");
              } else {
                  memoryGameModal.hide();
                  showErrorMessage('Respuesta incorrecta. ¬°Mejor suerte la siguiente vez!');
              }
            });

            //Bot√≥n "no" de Memoria
            document.getElementById('memoryNo').addEventListener('click', function() {
               clearCountdown('memoryCountdown');

               if (rightAnswer === 0) {
                    addResource("Piedra");
               } else {
                    memoryGameModal.hide();
                    showErrorMessage('Respuesta incorrecta. ¬°Mejor suerte la siguiente vez!');
               }
            });

            //Bot√≥n "verdadero" de L√≥gica
            document.getElementById('logicTrue').addEventListener('click', function() {
              clearCountdown('logicCountdown');

              if (rightAnswer === 1) {
                  addResource("Comida");
              } else {
                  logicGameModal.hide();
                  showErrorMessage('Respuesta incorrecta. ¬°Mejor suerte la siguiente vez!');
              }
            });

            //Bot√≥n "falso" de L√≥gica
            document.getElementById('logicFalse').addEventListener('click', function() {
              clearCountdown('logicCountdown');

              if (rightAnswer === 0) {
                  addResource("Comida");
              } else {
                  logicGameModal.hide();
                  showErrorMessage('Respuesta incorrecta. ¬°Mejor suerte la siguiente vez!');
              }
            });

            function showSuccessMessage(text = '¬°Recurso recolectado!') {
              const banner = document.getElementById('stateBanner');
              banner.className = 'alert alert-success border-0';
              banner.innerHTML = `<strong>¬°√âxito!</strong> ${text}`;
              banner.style.display = 'block';
              setTimeout(() => banner.style.display = 'none', 3000);
            }

            function showErrorMessage( text) {
                const banner = document.getElementById('stateBanner');
              banner.className = 'alert alert-danger border-0';
              banner.innerHTML = `<strong>Error:</strong> ${text}`;
              banner.style.display = 'block';
              setTimeout(() => banner.style.display = 'none', 3000);
            }
      });
  </script>
</body>

</html>