@{
    ViewData["Title"] = "Home Page";
}
<!doctype html>
<html lang="es">

<head>
    <meta charset="utf-8">
    <title>Coop Resources — V1 (números + botones)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap 5 CSS (CDN) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <style>
        body {
            background: #0b1220;
            color: #e6e8ef;
        }

        .card {
            background: #121a2b;
            border: 1px solid #223150;
            color: #ffffff;
        }

        .card-title {
            font-size: 3rem;
            text-align: center;
        }

        .card-text {
            font-size: 1.5rem;
            text-align: center;
        }

    </style>
</head>

<body>

    <!-- Navbar -->
    <nav class="navbar navbar-dark border-bottom border-secondary-subtle" style="background:#0b1220;">
        <div class="container">
            <a class="navbar-brand brand d-flex align-items-center gap-2" href="#">
                <span class="fw-bold">Coopera</span>
                <span class="badge rounded-pill text-bg-secondary">V1 (números)</span>
            </a>
        </div>
    </nav>

    <!-- Main -->
    <main class="container py-4">

        <div class="row justify-content-center g-3 mb-3">
            <div class="card text-center w-75">
                <div class="card-body">
                    <h5 class="card-title">¡Coopera!</h5>
                    <p class="card-text">Este es un ejemplo básico de una interfaz para un juego cooperativo de
                        recursos. Puedes cambiar tu nombre haciendo clic en el botón "Cambiar nombre".
                        Inicia una partida haciendo click al botón de abajo.
                    </p>
                </div>
            </div>

        <!-- Aniadir logica para empezar partida aqui -->
            <div class="d-flex justify-content-center" style="margin-top: 40px;">
                <button class="btn btn-primary btn-lg">Empezar una partida</button>
            </div>

        </div>
    </main>


    <!-- Bootstrap 5 JS Bundle (CDN) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <!-- JavaScript personalizado -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Referencias a elementos
            const changeNameBtn = document.getElementById('changeNameBtn');
            const changeNameModal = new bootstrap.Modal(document.getElementById('changeNameModal'));
            const newPlayerNameInput = document.getElementById('newPlayerName');
            const acceptNameChangeBtn = document.getElementById('acceptNameChange');
            const playerNameDisplay = document.getElementById('playerNameDisplay');

            // Abrir modal al hacer clic en "Cambiar nombre"
            changeNameBtn.addEventListener('click', function () {
                // Limpiar campo de entrada
                newPlayerNameInput.value = '';
                // Mostrar el modal
                changeNameModal.show();
                // Enfocar el campo de texto cuando se abre
                setTimeout(() => {
                    newPlayerNameInput.focus();
                }, 500);
            });

            // Manejar envío con botón "Aceptar"
            acceptNameChangeBtn.addEventListener('click', function () {
                const newName = newPlayerNameInput.value.trim();

                if (newName === '') {
                    // Mostrar error si está vacío
                    newPlayerNameInput.classList.add('is-invalid');
                    return;
                }

                if (newName.length > 20) {
                    // Validar longitud máxima
                    newPlayerNameInput.classList.add('is-invalid');
                    return;
                }

                // Validar caracteres (solo letras, números y algunos especiales)
                const validNamePattern = /^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑ_-]+$/;
                if (!validNamePattern.test(newName)) {
                    newPlayerNameInput.classList.add('is-invalid');
                    return;
                }

                // Actualizar nombre mostrado
                playerNameDisplay.innerHTML = `Jugador: <em>${newName}</em>`;

                // Limpiar estado de error
                newPlayerNameInput.classList.remove('is-invalid');

                // Cerrar modal
                changeNameModal.hide();
            });

            // Permitir envío con Enter
            newPlayerNameInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    acceptNameChangeBtn.click();
                }
            });

            // Limpiar estado de error cuando se empieza a escribir
            newPlayerNameInput.addEventListener('input', function () {
                this.classList.remove('is-invalid');
            });
        });
    </script>

</body>

</html>
